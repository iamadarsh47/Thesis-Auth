pragma solidity ^0.4.11;
pragma experimental ABIEncoderV2;
contract AuthenticationContract{
    uint256 count=0; 

    address [] admins; 
     address [] users;
     address [] fogs;
    
    struct Token{ 
        bytes32 UID;
        address user;
        address dev;
        address fog;
    }
    struct Devices{ 
        address dev;
        address fog;
    }
    struct UserData {
        string name;

        address user;

        string email;  
    }
    
    string[] public userTemplates;
     mapping (string => UserData) public users;
    
      function addUser(string memory name, address memory user, string memory email, , string memory template) public onlyAdmin {
        UserData memory newUser = UserData(name, user, email);
        userTemplates.push(template);
        users[template] = newUser;
         users.push(name,user,email,template);
    }

    function editUser(string memory name, address memory user, string memory email, string memory template) public onlyAdmin{
        users[template].name = name;
        users[template].user = user;
        users[template].email = email;
       
    }
    function getUser(string memory key) public view returns(string memory name, address memory user string memory email) {
        return (users[key].name, users[key].user , users[key].email,);
    }
    function getTemplatesSize() public view returns(uint) {
        return userTemplates.length;
    }
  
   
    Token [] public Tokens ; 
    mapping (address => Devices[]) public users_devices;
    mapping (address => address[]) public fog_devices; 

    modifier onlyAdmin{ 
        bool admin=false;
        for(uint256 i = 0; i < admins.length;i++){
            if(msg.sender==admins[i]){
                admin=true;
                break;
            }
        }
        if(!admin)
            revert("The address does not belong to admin array");;
        else
        _ ;
    }

    function AuthenticationContract(){
        admins.push(msg.sender); //creater of contract is the first admin
    }
    
     function addAdmin(address newAdmin) public onlyAdmin{ 
        admins.push(newAdmin);
        AdminAdded(newAdmin,msg.sender);
    }
    
    function addUserDeviceMapping(address user, address device,address fog)  public onlyAdmin{ 
         bool deviceExists=false;
        for(uint256 i = 0; i<fog_devices[fog].length; i++){
         if(fog_devices[fog][i]==device){
             deviceExists=true;
              break;   }
        }
        if(deviceExists){
            users_devices[user].push(Devices(device,fog));
            UserDeviceMappingAdded(user,device,msg.sender,fog);
        }
        else
            DeviceDoesnotExist(device,fog,msg.sender);
            }
  
    function addDeviceFogMapping(address fog, address device) public onlyAdmin{ 
        fog_devices[fog].push(device);
        FogDeviceMappingAdded(fog,device,msg.sender);
    }   
    
    
    event AdminAdded(address newAdmin, address addingAdmin); 
    event UserDeviceMappingAdded(address user, address device, address addingAdmin, address fog);
    event FogDeviceMappingAdded(address fog, address device, address addingAdmin);
    event DeviceDoesnotExist(address device, address fog, address sender);
    
     function delAdmin (address admin) public onlyAdmin{ 
        if(admins.length<2)
            revert("You are trying to delete the only admin of the system.");;
        else {
            uint256 i = 0;
            while(i < admins.length){
                if(admins[i]== admin){
                    delete admins[i];
                    AdminDeleted(admin,msg.sender); }
                i++; }
        }
    }
 
    function delUser(address user) public onlyAdmin{ 
        delete users_devices[user];
        UserDeviceAllMappingDeleted(user,msg.sender); }
  
    function delDev(address fog) public onlyAdmin{ 
        delete fog_devices[fog];
        FogDeviceAllMappingDeleted(fog,msg.sender);   }
    
    event AdminDeleted(address newAdmin, address deletingAdmin); 
    event UserDeviceAllMappingDeleted(address user,  address deletingAdmin);
    event FogDeviceAllMappingDeleted(address fog, address deletingAdmin);


    function requestAuthentication(address device,address fog, address user) public { 
        bool deviceExists=false;
        for(uint256 i = 0; i<fog_devices[fog].length; i++){
            if(fog_devices[fog][i]==device){ // check the devices of a user
             
                deviceExists=true;
                break; }
        }
        if(!deviceExists){
          DeviceDoesnotExist(device,fog,msg.sender); }
        else{
            bool auth=false;
            for(uint256 m = 0; m<users_devices[msg.sender].length; m++){
                if(users_devices[msg.sender][m].dev==device){ 
                    auth=true;
                     break; }
            }
            if(auth){ 
                Authenticated(msg.sender,device,fog);
                bytes32 UID= keccak256(device,fog,msg.sender,block.timestamp);
                \\sha3(device,fog,msg.sender,block.timestamp)
                Tokens.push(Token(UID,msg.sender,device,fog));
                TokenCreated(UID,msg.sender,device,fog); }
            else if(!auth){
                 NotAuthenticated(msg.sender); }
        }
    }
    event Authenticated(address user, address device, address fog); 
    event NotAuthenticated(address user);
    event TokenCreated(bytes32 uid, address user, address device, address fog);
\\add here currently

  function changeAdmin(address newAdmin) public onlyAdmin returns(bool) {
        require(newOwner != address(0), "New owners address cannot be empty!");

        owner = newAdmin;
        LogChangeAdmin(msg.sender, newAdmin);

        return true;
}
event LogChangeAdmin(address originalAdmin, address newAdmin);

function getAdminUser(address user) public onlyAdmin view returns(address) {
        return admin[user];
        }
 function getAdminFog(address fog) public onlyAdmin view returns(address) {
        return admin[fog];
        }
        
        
    }
